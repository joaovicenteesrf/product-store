@Entity utilizada para persistência
@RestController para endpoints
@Service para regra de negócio
@Repository com JPA

- Utilizar DTO's para receber e devolver respostas
- Usar HATEOAS em chamadas de criação



Clean code utilizado:
- Nomes representativos e claros
- Sem duplicações desnecessárias
- Validações usando Bean Validation
- Separação de responsabilidades
- Erros tratados com Exceptions customizadas
- Utilização do builder e outras anotações do Lombok


Design Pattern utilizado:
- Builder: utilizado para instanciar entidades

- Factory Method: métodos createProduct, criarPedido encapsulam lógica de criação

- Repository: interfaces JPA

- Service Layer: Camada intermediária entre controllers e repositórios

- DTO Pattern: Separar os dados de entrada/saída

- Proxy: Abstrair chamadas a Api's externas com Feign Client

- Cache Proxy: Reduzir acesso ao banco com Redis


SOLID:

- S: Single Responsability: Serviços e DTO's têm responsabilidade única

- O: Open/Closed: Facilidade de extensão sem modificação

- L: Liskov Substitution: Não tem heranças diretas, mas respeita o princípio na substituição de dependências

- I: Interface Segregation: Separação adequada das responsabilidades dos repositórios

- D: Dependency Inversion: Spring para injeção de dependências



--------------------------------------------------------------------------------------------------------------------

Ordem do fluxo:

- @RestController: Controller recebe uma DTO de Request
    - Instancia Service com @Autowired
    - Controller chama camada Service

- @Service: Camada de serviço organiza as regras de negócio
    - Instancia o Repository com @Autowired
    - Implementa regras de negócio e tratamento personalizado de exceptions

- @Repository: Camada que acessa o banco via JPA e Hibernate para realizar operações CRUD
    - Realiza chamadas customizadas e chamadas padrão do JPA
    - Define qual é a entidade que terá suas alterações realizadas

- @Entity: Entidade mapeada para alguma tabela no banco
    - Possui todas as anotações básicas do lombok: construtores, getters, setters, builder e @Table)
    - Não deve ter validações nos campos. Isso é responsabilidade das DTO's.


--------------------------------------------------------------------------------------------------------------------

Guias:

Tratamento de exceptions personalizada:

1- Configurar uma classe "GlobalExceptionHandler"
    - Essa classe será anotada com @RestControllerAdvice
    - Terá um método @ExceptionHandler para cada tipo de Exception

2- Configurar uma classe de erro customizada que herda de RuntimeException
    - definir um código que virá a partir de um enum
    - mensagem a ser definida por string

3- Em seguida,basta utilizar, lançando a exceção do passo 2.